###############################################################################
############################### LIBRARY IMPORTS ###############################
###############################################################################

import sys as sys

from argparse import ArgumentParser

from routines import learn
from routines import predict

###############################################################################
############################ CLI ARGUMENT PARSING #############################
###############################################################################

def parse_args(args):

    p = ArgumentParser()
    
    sub_p = p.add_subparsers(dest = 'mode')

    learn_p = sub_p.add_parser('learn')
    help_str_ = {'inp_f': 'path to .txt input file with variables'}
    learn_p.add_argument('inp_f', type = str, 
                         help = help_str_['inp_f'])

    predict_p = sub_p.add_parser('predict')
    help_str_ = {'mdl_dir': 'path to directory generated via learn mode',
                 'xyz_dir': 'path to directory with .xyzs to predict',
                 'conv_inp_f': 'path to .txt conv. input file with variables'}
    predict_p.add_argument('mdl_dir', type = str, 
                           help = help_str_['mdl_dir'])
    predict_p.add_argument('xyz_dir', type = str, 
                           help = help_str_['xyz_dir'])
    predict_p.add_argument('-c', '--conv_inp_f', type = str, 
                           help = help_str_['conv_inp_f'])
    
    args = p.parse_args()

    return args  

###############################################################################
################################ MAIN ROUTINE #################################
###############################################################################

def main(args):

    args = parse_args(args)

    print('\n***************************************************************',
          '\n***************************************************************',
          '\n***************************************************************',
          '\n********                                               ********',
          '\n********              | X A N E S N E T |              ********',
          '\n********                                               ********'
          '\n********                    v 4.0.0                    ********',
          '\n********                                               ********',
          '\n********      Software Design + Development Lead:      ********',
          '\n********             Dr. Conor D. Rankine              ********',
          '\n********                                               ********',
          '\n********                 Science Lead                  ********',
          '\n********              Dr. Tom J. Penfold               ********',
          '\n********                                               ********',
          '\n********        check out (+ cite!) this code:         ********',
          '\n********                                               ********',
          '\n********   1) J. Phys. Chem. A, 2020, 124, 4263-4270   ********',
          '\n********        DOI : 10.1021/acs.jpca.0c03723         ********',
          '\n********                                               ********',
          '\n********         2) Molecules, 2020, 25, 2715          ********',
          '\n********        DOI : 10.3390/molecules25112715        ********',
          '\n********                                               ********',
          '\n***************************************************************',
          '\n***************************************************************',
          '\n***************************************************************\n')

    if args.mode == 'learn':
        learn(args.inp_f)

    if args.mode == 'predict':
        predict(args.mdl_dir, args.xyz_dir, args.conv_inp_f)

    print('\n***************************************************************',
          '\n************************** all done! **************************',
          '\n***************************************************************\n')

################################################################################
############################## PROGRAM STARTS HERE #############################
################################################################################

if __name__ == '__main__':
    main(sys.argv[1:])

################################################################################
############################### PROGRAM ENDS HERE ##############################
################################################################################